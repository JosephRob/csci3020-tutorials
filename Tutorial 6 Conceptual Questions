Student Names:
Joseph Robertson, Shomari Simpson
Conceptual Questions
1.What is fork(), how does it differ from multi-threading (pthreads)?

Fork is used to create processes while pthreads creates threads. The major difference between the two are that threads have shared memory while process do not. 

2.What is inter-process communication (IPC)? Describe methods of performing IPC.

Inter-process communication refers to the mechanisms an operating system provides to allow the processes to manage shared data. This can be achieved in the form of a a record stored on a disk and can be read by processes, a pipe that can send unidirectional data between two processes, or a signal that remotely trigger a partnered process. 

3.Provide an explanation of semaphores, how do they work, how do they
differ from mutual exclusion?

A semaphore is a variable used to control access to a common resource by multiple processes. The variable can be used as a counting semaphore that allow a certain amount of processes to access a common resource or a binary semaphore that only allows one process access. 

4.Provide an explanation of wait (P) and signal (V).

Wait is called when a process wants access to a resource and must wait until the resource is available. When is gets access, it decrements the semapore, 

Signal is called when a process has finished using a resource and increments the semaphore to notify other processes that the resource is available. 

5.Research the main functions used for semaphores in<semaphore.h>and explain each function.

Sem_close:used to indicate that the calling process is finished using the name semapore indicated by sem
Sem_destroy:is used to destroy the unnamed semaphore indicated by sem
sem_getValue:updates the location reference by the sval argument to have the value of the semaphore referenced by sem without affecting the state of the semaphore
Sem_init:used to initialise the unnamed semaphore referred to by sem
Sem_open:established a connection between a named semaphore and a process
Sem_post:unlocks the semaphore reference by sem by performing a semaphore unlock operation on that semaphore.
Sem_trywait:locks the semaphore referenced by sem only if the semaphore is currently not locked
Sem_unlink:removes the semaphore named by the string name.
Sem_wait:locks the semaphore referenced by the sem by performing a semaphore lock operation on the semaphore

