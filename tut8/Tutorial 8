Student Names:
Joseph Robertson, Shomari Simpson
Conceptual Questions
1.What is an Abstract Data Type (ADT)?
An abstract data type is a mathematical model for a certain class of data structures that have similar behavior.
2.Explain the difference between a queue (FIFO) and a stack (LIFO).
In a queue, the oldest items are served first and in a stack, the newest items are served first.
3.Name and briefly explain three types of data structures.
Array: a collection of elements, each identified by at least one array index
Linked List: a linear collection of elements in which order is preserved with pointers that are associated with the element next in the sequence.
Class: objects that contain initial starting states and implementations of behaviors that can be instantiated individually.
4.Explain what a binary tree is, what are some common operations of a binary tree?
A binary tree is a data structure in which each node has at most two children.
Operations:create new node, remove node, search
5.Explain what a hash table (dictionary) is, what are common operations of a hash table?
A hash table is a data structure which implements a structure that can map keys to values.
Operation:insertion deletion, lookup
#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>

#include <string.h>

struct proc{
    char parent[256];
    char name[256];
    int priority;
    int memory;
};

struct proc_tree{
    struct proc self;
    struct proc_tree * right;
    struct proc_tree * left;
};
struct proc_tree base;
struct proc_tree head;
struct proc_tree insert(struct proc process, struct proc_tree baseReference)
{
    //struct proc_tree * A = (struct proc_tree *)malloc(sizeof(struct proc_tree));
    //*A=baseReference;
    printf("refparent:%s\n",baseReference.self.parent);
    printf("refname:%s\n",baseReference.self.name);
    printf("processparent:%s\n",process.parent);
    printf("processname:%s\n",process.name);
    if (strcmp(process.parent,"NULL")==0){
        baseReference.self=process;
        baseReference.left = (struct proc_tree *)malloc(sizeof(struct proc_tree));
        baseReference.right = (struct proc_tree *)malloc(sizeof(struct proc_tree));
        strcpy((*baseReference.left).self.name,"NULL");
        strcpy((*baseReference.right).self.name,"NULL");
        printf("insert self\n");
        base=baseReference;
        head=baseReference;
        //return base;
        return baseReference;
    }
    if(strcmp (process.parent,baseReference.self.name)==0){
        if((strcmp ((*baseReference.left).self.name,"NULL"))==0){
            (*baseReference.left).left = (struct proc_tree *)malloc(sizeof(struct proc_tree));
            (*baseReference.left).right = (struct proc_tree *)malloc(sizeof(struct proc_tree));
            strcpy((*(*baseReference.left).left).self.name,"NULL");
            strcpy((*(*baseReference.left).right).self.name,"NULL");
            strcpy((*(*baseReference.left).left).self.name,process.parent);
            strcpy((*(*baseReference.left).right).self.name,process.parent);

            (*baseReference.left).self=process;
            (*baseReference.left).left=NULL;
            (*baseReference.left).right=NULL;
            //base=*A;
            //base=baseReference;
            printf("insert left\n");
            return baseReference;
            //return;
        }
        //if (baseReference.right==NULL){
        if((strcmp ((*baseReference.right).self.name,"NULL"))==0){
            (*baseReference.right).left = (struct proc_tree *)malloc(sizeof(struct proc_tree));
            (*baseReference.right).right = (struct proc_tree *)malloc(sizeof(struct proc_tree));
            strcpy((*(*baseReference.right).left).self.name,"NULL");
            strcpy((*(*baseReference.right).right).self.name,"NULL");
            strcpy((*(*baseReference.right).left).self.name,process.parent);
            strcpy((*(*baseReference.right).right).self.name,process.parent);
            
            (*baseReference.right).self=process;
            (*baseReference.right).left=NULL;
            (*baseReference.right).right=NULL;
            //base=*A;
            //base=baseReference;
            printf("insert right\n");
            return baseReference;
            //return;
        }
        else{
            printf("insert fail after parent-self match\n");
            return baseReference;
            //return;
        }
    }
    if((strcmp ((*baseReference.left).self.name,"NULL"))!=0){
        printf("checking left\n");
        (*baseReference.left).left = (struct proc_tree *)malloc(sizeof(struct proc_tree));
            (*baseReference.left).right = (struct proc_tree *)malloc(sizeof(struct proc_tree));
            strcpy((*(*baseReference.left).left).self.name,"NULL");
            strcpy((*(*baseReference.left).right).self.name,"NULL");
            strcpy((*(*baseReference.left).left).self.name,"NULL");
            strcpy((*(*baseReference.left).right).self.name,"NULL");
        //(*baseReference.left)=insert(process,(*baseReference.left));
        insert(process,(*baseReference.left));
        //return;
        //return baseReference;
    }
    if((strcmp ((*baseReference.right).self.name,"NULL"))!=0){
        printf("checking right\n");
        (*baseReference.right).left = (struct proc_tree *)malloc(sizeof(struct proc_tree));
            (*baseReference.right).right = (struct proc_tree *)malloc(sizeof(struct proc_tree));
            strcpy((*(*baseReference.right).left).self.name,"NULL");
            strcpy((*(*baseReference.right).right).self.name,"NULL");
            strcpy((*(*baseReference.right).left).self.name,"NULL");
            strcpy((*(*baseReference.right).right).self.name,"NULL");
        //(*baseReference.right)=insert(process,(*baseReference.right));
        insert(process,(*baseReference.right));
        //return;
        //return baseReference;
    }
    //printf("insert fail\n");
    //return baseReference;    
}

int print(struct proc_tree baseReference){
    printf("parent%s\n",baseReference.self.parent);
    printf("child%s\n",baseReference.self.name);
    printf("\n");

    if((baseReference).left!=NULL){
        if((baseReference).right!=NULL){
            return print(*baseReference.left) +print(*baseReference.right);
        }
        return print(*baseReference.left);
    }
    if((baseReference).right!=NULL){
            return print(*baseReference.right);    
    }
    printf("--end of branch--\n");
    return 0;
}
int main(){
    char name [256];
    char parent [256];
    int priority;
    int memory;
    strcpy((base).self.parent,"NULL");
    int size=7;
    freopen("processes_tree.txt","r",stdin);
    for(int x=0;x<size;x++){
        scanf("%s,",parent);
        scanf("%s,",name);
        scanf("%i,",&priority);
        scanf("%i,",&memory);
        //printf("%s",parent);
        struct proc process;
        strcpy(process.parent,strtok(parent,","));
        strcpy(process.name,strtok(name,","));
        process.priority=priority;
        process.memory=memory;
        insert(process,head);
        printf("\n");
    }
    
    print(base);
}

#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <string.h>
#define MEMORY 1024
#include <semaphore.h>
struct proc{
    char name[256];
    int priority;
    int pid;
    int address;
    int memory;
    int runtime;
    int suspended;
};
struct priority{
    struct proc process;
    struct priority * next;
};
struct secondary{
    struct proc process;
    struct secondary * next;
};
int termination=0;
//sem_t mutex;
struct proc zeroRuntimeProcess;
int avail_mem[MEMORY]={ [ 0 ... 1023 ] = 0 };
struct priority *proot;
    struct secondary *sroot;
    struct secondary *sconductor;
    struct priority *pconductor;
int PremoveP(int ppriority,int pmemory);
//int SremoveP(struct priority *proot,struct priority *pconductor,struct secondary thisOne,int ppriority,int pmemory);
struct priority * Ppush(struct proc process){
    pconductor = proot;
    if ( pconductor != 0 ) { /* Makes sure there is a place to start */
        while ( pconductor->next != 0 ) {
            printf( "%s\n", pconductor->process.name );
            pconductor = pconductor->next;
            }
        printf( "%s\n", pconductor->process.name );
    }
    pconductor->next = malloc( sizeof(struct priority) );  

    pconductor = pconductor->next;

    if ( pconductor == 0 )
    {
        printf( "Out of memory" );
        return proot,pconductor;
    }
    /* initialize the new memory */
    pconductor->next = 0;         
    pconductor->process = process;

    return proot,pconductor;
}
struct secondary * Spush(struct proc process){
    sconductor = sroot;
    if ( sconductor != 0 ) { /* Makes sure there is a place to start */
        while ( sconductor->next != 0 ) {
            //printf( "%s\n", sconductor->process.name );
            sconductor = sconductor->next;
            }
        //printf( "%s\n", sconductor->process.name );
    }
    
    sconductor->next = malloc( sizeof(struct secondary) );  

    sconductor = sconductor->next;

    if ( sconductor == 0 )
    {
        printf( "Out of memory" );
        return sroot,sconductor;
    }
    /* initialize the new memory */
    sconductor->next = 0;         
    sconductor->process = process;

    return sroot,sconductor;
}
struct proc Ppop(){
        struct proc r=proot->process;
        if(proot->next==0){
                Ppush(zeroRuntimeProcess);
                printf("returned\n");
                proot=proot->next;
                return r;
        }
        if (r.runtime==0){
            printf("runtime was zero\n");
            proot=proot->next;
            r=proot->process;
        }
        proot=proot->next;
        return r;
}
struct proc Spop(){
        sconductor = sroot;
        struct proc r=sroot->process;
        /*if(sroot->next==0){
                //Spush(zeroRuntimeProcess);
                //printf("returned\n");
                //sroot=sroot->next;
                return r;
        }*/
        if (r.runtime==0){
            printf("runtime was zero\n");
            sroot=sroot->next;
            r=sroot->process;
        }
        sroot=sroot->next;
        return r;
}
void Pprint(){
    pconductor = proot;
    if ( pconductor != 0 ) { /* Makes sure there is a place to start */
        while ( pconductor->next != 0 ) {
            printf( "%s\n", pconductor->process.name );
            pconductor = pconductor->next;
            }
        printf( "%s\n", pconductor->process.name );
    }
}
void Sprint(){
    sconductor = sroot;
    if ( sconductor != 0 ) { /* Makes sure there is a place to start */
        while ( sconductor->next != 0 ) {
            printf( "%s\n", sconductor->process.name );
            sconductor = sconductor->next;
            }
        printf( "%s\n", sconductor->process.name );
    }
}
void makeT(){
    sconductor = sroot;
    if ( sconductor != 0 ) { /* Makes sure there is a place to start */
        while ( sconductor->next != 0 ) {
            termination+=1;
            sconductor = sconductor->next;
            }
        //termination+=1;
    }
}
int PremoveP(int ppriority,int pmemory){
    int address=8080;
    pconductor = proot;
    while (1){
        if (ppriority<=pconductor->process.priority &&pconductor->process.address!=8080 &&pconductor->process.memory >=pmemory){
            address=pconductor->process.address;
            pconductor->process.address=8080;
            printf("found address\n");
            return address;
        }
        if(pconductor->next != 0){
            pconductor = pconductor->next;
            continue;
        }
        else{
            printf("could not find address\n");
            return address;
        }
    }
}
int PcheckMemInd(int avail_mem[MEMORY],int memory,int priority){
    int count;
    int index=0;
    for (int x = 0; x < MEMORY; x++){
        if (avail_mem[x]==0){
            //printf("found");
            avail_mem[x]=1;
            count++;
        }
        else{
            for (int y = index; y < (index+count); y++){
                avail_mem[y]=0;
            }
            //printf("reset");
            count=0;
            index=x+1;
        }
        if (count==memory){
            //printf("found space");
            return index;
        }
    }
    index=PremoveP(priority,memory);
    //printf("current index: %i\n",index);
    return index;
}
int SremoveP(int ppriority,int pmemory){
    int address=8080;
    sconductor = sroot;
    while (1){
        if (ppriority<=sconductor->process.priority &&sconductor->process.address!=8080 &&sconductor->process.memory >=pmemory){
            address=sconductor->process.address;
            sconductor->process.address=8080;
            printf("found address\n");
            return address;
        }
        if(sconductor->next != 0){
            sconductor = sconductor->next;
            //printf("sremovelooping");
            continue;
        }
        else{
            //printf("could not find address\n");
            return address;
        }
    }

}
int ScheckMemInd(int avail_mem[MEMORY],int memory,int priority){
    //sem_wait(&mutex);
    int count;
    int index=0;
    for (int x = 0; x < MEMORY; x++){
        if (avail_mem[x]==0){
            //printf("found");
            avail_mem[x]=1;
            count++;
        }
        else{
            for (int y = index; y < (index+count); y++){
                avail_mem[y]=0;
            }
            //printf("reset");
            count=0;
            index=x+1;
        }
        if (count==memory){
            //printf("found space");
            //sem_post(&mutex);
            return index;
        }
    }
    index=SremoveP(priority,memory);
    //printf("current index: %i\n",index);
    //sem_post(&mutex);
    return index;
}
void freeMemInd(int address,int memory,int avail_mem[MEMORY]){
    int count;
    //sem_wait(&mutex);
    for (int x = address; count < memory; x++){
        avail_mem[x]=0;
        count++;
    }
    //sem_post(&mutex);
}

int main(){
    
    proot = malloc( sizeof(struct priority) );
    sroot = malloc( sizeof(struct secondary) );   
    zeroRuntimeProcess.runtime=0;
    zeroRuntimeProcess.address=8080;
    zeroRuntimeProcess.pid=34404;
    proot->process=zeroRuntimeProcess;
    sroot->process=zeroRuntimeProcess;

        proot->next = 0;   
        proot->process = zeroRuntimeProcess;
        pconductor = proot;
        if ( pconductor != 0 ) {
            while ( pconductor->next != 0)
            {
                pconductor = pconductor->next;
            }
        }
        sroot->next = 0;   
        sroot->process = zeroRuntimeProcess;
        sconductor = sroot;
        if ( sconductor != 0 ) {
            while ( sconductor->next != 0)
            {
                sconductor = sconductor->next;
            }
        }
    char name [256];
    int priority;
    int memory;
    int runtime;
    int size=10;
    freopen("processes_q5.txt","r",stdin);
    for(int x=0;x<size;x++){
        scanf("%s,",name);
        scanf("%i,",&priority);
        scanf("%i,",&memory);
        scanf("%i",&runtime);
        printf("%s\n",name);
        struct proc process;
        strcpy(process.name,strtok(name,","));
        process.priority=priority;
        process.memory=memory;
        process.runtime=runtime;
        process.pid=0;
        process.suspended=0;

        if (priority==0){
            proot,pconductor=Ppush(process);
        }
        else{
            sroot,sconductor=Spush(process);
        }    
    }
    printf("done pushing\n");
    Pprint();
    Sprint();

    struct proc n;
    n=Ppop();
    n.address= PcheckMemInd(avail_mem,n.memory,n.priority);
    if (n.address==8080){
        printf("no memory\n");
        exit(0);
    }
Pprint(proot,pconductor);
    printf("%d\n",n.runtime);
    printf("%d\n",n.pid);
    printf("%s\n",n.name);
                    //Ppush(zeroRuntimeProcess);
    while(n.runtime!=0){
        int status;
        printf("current:%s\t%i\t%i\t%i\n",n.name,n.priority,n.memory,n.runtime);
          pid_t pid;
        pid = fork();
        if (pid==0){
            //printf("Hello from child!\n");
            execl("/home/dafungajunga/Documents/ostut8/process","process",NULL);
            perror("execl() failure!\n\n");
        }
        else{
            sleep(n.runtime);
            n.pid=pid;
            //printf("Hello from Parent! %d\n",pid);
            kill(pid,SIGINT);
            waitpid (pid, &status, 0);
            freeMemInd(n.address,n.memory,avail_mem);
            n=Ppop();
            n.address= PcheckMemInd(avail_mem,n.memory,n.priority);
            if (n.address==8080){
                printf("no memory\n");
                exit(0);
            }
        }
    }
    


    struct proc m;
    makeT();
    while(termination>0){
        int status;
        printf("current:%s\t%i\t%i\t%i\n",m.name,m.priority,m.memory,m.runtime);
        printf("current termination:%d\n",termination);        
        Sprint();
          pid_t pid;
        m=Spop();
        if (m.runtime<=0){
            termination-=1;
            continue;
        }
        printf("weird1\n");
        while(m.pid==34404){
            //printf("PIDlooping\n");
            m=Spop();
        }
        printf("weird2\n");
        m.address= ScheckMemInd(avail_mem,m.memory,m.priority);
        /*if (m.address==34404){
            printf("looping");
            m.address= ScheckMemInd(avail_mem,m.memory,m.priority);

            continue;
        }*/
        printf("weird3\n");
        if (m.address==8080){
            printf("no memory, pushing back");
            Spush(m);
            continue;
        }
        if(m.pid==0){
            pid = fork();
        }
        if (pid==0){
            execl("/home/dafungajunga/Documents/ostut8/process","process",NULL);
                perror("execl() failure!\n\n");
        }
        else{
                sconductor = sroot;
                /*if(m.pid==0){
                    m.pid=pid;
                }*/
                if (m.runtime==1){
                    kill(m.pid,SIGCONT);
                    waitpid (m.pid, &status, WCONTINUED);
                    sleep(1);
                    kill(m.pid,SIGINT);
                    m.runtime-=1;
                    waitpid (m.pid, &status, 0);
                    freeMemInd(m.address,m.memory,avail_mem);
                    termination-=1;
                    printf("done\n");
                    continue;
                }
                if(m.pid==0){
                    m.pid=pid;
                    sleep(1);
                    kill(m.pid,SIGTSTP);
                    waitpid (m.pid, &status, WUNTRACED);
                    m.runtime-=1;
                    m.suspended=1;
                    printf("1suspended\n");
                    if(m.runtime>0){
                        printf("pushing");
                        Spush(m);
                        freeMemInd(m.address,m.memory,avail_mem);
                        continue;
                    }
                    else{
                        kill(m.pid,SIGINT);
                        //m.runtime-=1;
                        waitpid (m.pid, &status, 0);
                        freeMemInd(m.address,m.memory,avail_mem);
                        printf("done\n");
                        termination-=1;
                        continue;
                    }
                }
                if (m.suspended==1 && m.runtime>0){

                    m.suspended=0;
                    kill(m.pid,SIGCONT);
                    waitpid (m.pid, &status, WCONTINUED);
                    sleep(1);
                    m.runtime-=1;
                    m.suspended=1;
                    kill(m.pid,SIGTSTP);
                    waitpid (m.pid, &status, WUNTRACED);
                    printf("suspended\n");
                    if(m.runtime>0){
                        printf("pushing\n");
                        Spush(m);
                        freeMemInd(m.address,m.memory,avail_mem);
                        continue;    
                    }
                    else{
                        kill(m.pid,SIGCONT);
                        waitpid (m.pid, &status, WCONTINUED);
                        kill(m.pid,SIGINT);
                        //m.runtime-=1;
                        waitpid (m.pid, &status, 0);
                        freeMemInd(m.address,m.memory,avail_mem);
                        termination-=1;
                        printf("done\n");
                        continue;
                    }    
                }
                
            }        
        }



}





