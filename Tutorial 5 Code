//QUESTION 1
#define _XOPEN_SOURCE 600 // required for barriers to work
#include <stdlib.h>
#include <stdio.h>
#include <pthread.h>
#include <unistd.h>
#include <time.h>
void * hello_world(void *arg)
{
    int r = rand() % 5;
    sleep(r);	
    printf("Hello world!\n");

    return NULL;
}

void * goodbye(void *arg)
{
    int r = rand() % 5;
    sleep(r);		
    printf("goodbye!\n");

    return NULL;
}

int main(int argc, char **argv)
{
    pthread_t thr;
    srand(time(NULL));
    if(pthread_create(&thr, NULL, &hello_world, NULL))
    {
        printf("Could not create thread\n");
        return -1;
    }

    if(pthread_create(&thr, NULL, &goodbye, NULL))
    {
        printf("Could not create thread\n");
        return -1;
    }
    if(pthread_join(thr, NULL))
    {
        printf("Could not join thread\n");
        return -1;
    }
    return 0;
}
//QUESTION 2
#define _XOPEN_SOURCE 600 // required for barriers to work
#include <stdlib.h>
#include <stdio.h>
#include <pthread.h>
int grade[5];
void * bellcurve(void *arg)
{
	int i = (int)arg;
	grade[i] = (int)grade[i]*(1.5);
    	printf("Grade %d:%d\n",i,grade[i]);
	

    	return NULL;
}
int main(void)
{
	int i;
	pthread_t thr[5];
	
	printf("Enter 5 Student Grades:");
	for(i=0;i<5;i++){
		scanf("%d",&grade[i]);
	}
	for(int i = 0; i < 5; ++i){
        	if(pthread_create(&thr[i], NULL, &bellcurve, (void*)i)){
            		printf("Could not create thread %d\n", i);
            		return -1;
        	}
    	}
	for(int i = 0; i < 5; ++i){
        	if(pthread_join(thr[i], NULL)){
            		printf("Could not join thread %d\n", i);
            		return -1;
        	}
    	}
	return 0;
	
}
//Question 3
#define _XOPEN_SOURCE 600 // required for barriers to work
#include <stdlib.h>
#include <stdio.h>
#include <pthread.h>
#include <string.h>
#include <time.h>
struct student{
int grade;
int id;
char name [30];
};
struct student records[5];
void * bellcurve(void *record){
	struct student *data;
	data = record;
	data->grade = (int)data->grade*(1.5);
	printf("Student Name: %s\n",data->name);
	printf("Student ID:%d\n",data->id);
    	printf("Grade:%d\n",data->grade);
	
    	return NULL;
}
int main(void)
{
	int i,ID,g;
	char n [30];
	pthread_t thr[5];
	printf("Enter 5 Student student names, student ids and grades:");
	for(i=0;i<5;i++){
		scanf("%29s",n);	
		scanf("%d",&ID);	
		scanf("%d",&g);
		strcpy(records[i].name,n);
		records[i].id = ID;
		records[i].grade = g;
	}
	for(int i = 0; i < 5; ++i){
		
        	if(pthread_create(&thr[i], NULL, bellcurve,(void *)&records[i])){
            		printf("Could not create thread %d\n", i);
            		return -1;
        	}
    	}
	for(int i = 0; i < 5; ++i){
        	if(pthread_join(thr[i], NULL)){
            		printf("Could not join thread %d\n", i);
            		return -1;
        	}
    	}
	return 0;
	
}
